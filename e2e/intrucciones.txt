Creé estas dos porque no sabía que las creaba el proyecyo,sólo había que buscarlo. Los archivos conf.js y spec.js que el proyecto crea
están en usuarios/vicente/appData/roaming/modules/protector/example
Debemos situarnos en esa carpeta y lanzar el test.
No hace falta lanzar el driver aquí. Todo visto en un video en ingles de un indio.
Para configurar nuestro primer case debemos tocar las configuraciones de :
    browser,framework... en conf.js

En spec.js configuraremos los test

Lo que he hecho es copiar esos dos en la carpeta e2e,así solo tendre que entrar en esa carpeta y lanzar el test
Pongo en google demo protractor y me sale la "calculadora"
Crearemos el test sobre ese ejemplo
Creo calculadora.js y miro en la web la sintaxis de Jasmine.(describe,it,...)
Empezamos por la estructura : 


        describe('prueba1 test para calculadora de github', function(){

            //aquí creamos los bloques it

            it('addition test', function(){



            })

            it('subtraction test', function(){


                
            })


})

La primera vez solo pondremos la primera parte.
mirar protactor api en google para ver todas sus características.
Cogemos el link de la calculadora y lo ponemos.
Una vez puesto su link, vamos a conf.js y cambiamos el test poniendo calculadora.js
El test funcionará poniendo protractor conf.js
Podemos poner browser.sleep(2000) con lo que haremos que el test no sea tan rápido. Puede pasar así o que se lento y debamos acelelarlo
Para empezar a hacer test de la calculadora, debemos seleccionar la caja de texto primera, para introducir datos en el test.
Vamos al DOM y la buscamos la caja de texto,en este caso es la input ng-model="first"
Vamos a la api y ponemos ng-model, nos enseñará como debemos seleccionarlo, copiamos y lo ponemos(en este caso :

element(by.model('person.name'))) (cambiando person.name por first,que es el nombre del input)
Ahra buscamos en el api sendkeys,lo añadimos. Ponemos .sendKeys(2) con lo que comprobamos que al lanzar nos pondrá un 2
Ahora debemos poner otro dígito en la otra caja de texto
También debemos hacer click en el botón,para ello buscaremos la forma de seleccionarlo mediante css,esto también lo vemos en la api
Lo finalizamos con .click() para hacer click(se hace así,ver en api)
Ahora buscamos la caja donde aparece el resultado y la seleccionamos
En este caso hay que ponerlo así: 
    element(by.cssContainingText('.ng-binding', '5'))
ya que ng-binding es dinámico, hay que ponerlo asi y luego lo que esperamos.
Ahora mismo todo funcioona porque no estamos verificando.
Pasaremos el containing a una variable para que sea mas facil
Vemos en expectations,en la api y elegimos
importante esta api de jasmine tambien : https://devhints.io/jasmine
Aqui estan la verificaciones
Los principales metodos del elemento son click(), getText() y sendKeys
Si elegimos con css podemos hacerlo de dos formas : 
            1) element(by.css('my-css'))
            2) $('my-css') ---) todo reducido a $

He intentado probar a seleccionar options value y cambiar suma,resta para hacer tests.
Pero no funciona, y el siguiente paso que da el video, (protractor beginner tutorial 9)
es ordenar tipo POM , así que crea una carpeta de pages y un archivo homepage.js
En él (dentro de la funcion homepage)copiamos todos los elementos que hemos seleccionado en calculadora.js
Solo copiamos el seleccionador guardandolos en variables
Nos fijamos que queda más ordenado,más limpio y no ponemos números,usamos variables
Fijarse en lo que cambia, como en el homepage solo ponemos funciones y variables y los datos los damos en calculadora haciendo la llamada
a los metodos. Es importante el required de calculadora let homepage = require('./../paginas/homepage.js')


-----------hacer screenshoot con porotactor----

Lo instalamos : npm install protractor-jasmine2-screenshot-reporter --save-dev
Editamos conf.js y añadimos lo que pone : 

    var HtmlScreenshotReporter = require('protractor-jasmine2-screenshot-reporter');

    var reporter = new HtmlScreenshotReporter({
    dest: 'target/screenshots',
    filename: 'my-report.html'
    });

Luego añadimo esto al final del archivo de conf :

// Setup the report before any tests start
beforeLaunch: function() {
  return new Promise(function(resolve){
    reporter.beforeLaunch(resolve);
  });
},

// Assign the test reporter to each running instance
onPrepare: function() {
  jasmine.getEnv().addReporter(reporter);
},

// Close the report after all tests finish
afterLaunch: function(exitCode) {
  return new Promise(function(resolve){
    reporter.afterLaunch(resolve.bind(this, exitCode));
  });
}

Ahora en cada test, nos hara una imagen y un html. Queda bastante bien, porque queda todo el restulado registrado en una imagen y en un archivohtml

----------Crear allure html reports con protractor--------------------

vamos a google y ponemos jasmine allure report

Instalamos. Al igual que antes tendremos que modificiar el conf.js y añadir un par de lineas despues de instalarlo : 
npm i jasmine-allure-reporter
Como vemos que tenemos un on prepare ya de screeshot,copiamos todo menos eso : 
En realidad no copiar esto, lo copié y no iba, lo dejé sin copiar y funcioan perfectamente

    var AllureReporter = require('jasmine-allure-reporter');
    jasmine.getEnv().addReporter(new AllureReporter({
    resultsDir: 'allure-results'

y lo metemos en el on prepare. El on prepare queda asi de momento:

    onPrepare: function () {
        jasmine.getEnv().addReporter(reporter);
        var AllureReporter = require('jasmine-allure-reporter');
        jasmine.getEnv().addReporter(new AllureReporter({
        resultsDir: 'allure-results'
        }));
    },

HAsta aquí obtemeos un archivo XML, queremos HTML : 

    vamos google ybuscamos allure framw

    añadimos allure comandline---) npm i -g allure-commandline

    Ejecutamos allure serve (enlace de la carpeta de allure donde recibimos los reportes)

    allure serve V:\Angular-trabajos\carpeta1\protactor\prbandoProtractor\e2e\allure-results

    Ahora nos abre una web donde podemos ver todos los test y manejarlos


---------------AHORA VAMOS A VER COMO GENERAR HTML REPORTS con Screenshot en Protractor-------------------

Vamosa  google y buscamos html protractor reports y lo instalamos:
    npm i protractor-html-reporter-2

Añadimos lo necesario,elegimos añadirlo desde el archivo conf.js:


  onComplete: function() {
    var browserName, browserVersion;
    var capsPromise = browser.getCapabilities();

    capsPromise.then(function (caps) {
      browserName = caps.get('browserName');
      browserVersion = caps.get('version');
      platform = caps.get('platform');

      var HTMLReport = require('protractor-html-reporter-2');

      testConfig = {
          reportTitle: 'Protractor Test Execution Report',
          outputPath: './',
          outputFilename: 'ProtractorTestReport',
          screenshotPath: './screenshots',
          testBrowser: browserName,
          browserVersion: browserVersion,
          modifiedSuiteName: false,
          screenshotsOnlyOnFailure: true,
          testPlatform: platform
      };
      new HTMLReport().from('xmlresults.xml', testConfig);
  });
  } --------) nos fijamos si ya tenemos el on_complete, si lo tenemos solo añadimos lo de dentro,si no, añadimos la funcion entera
    NO OLVIDAR poner la coma

También tenemos que añadir unas líneas en on_prepare function :

Por último,ejecutar conf.js
Buscamos el archivo generado y lo abrimos, hay una web parecida a allure
Como vemos hay una opcion que te deja ver una imagen del erro, para ello copiaremos esto en onPrepare:

var fs = require('fs-extra');
 
fs.emptyDir('screenshots/', function (err) {
        console.log(err);
    });
 
    jasmine.getEnv().addReporter({
        specDone: function(result) {
            if (result.status == 'failed') {
                browser.getCapabilities().then(function (caps) {
                    var browserName = caps.get('browserName');
 
                    browser.takeScreenshot().then(function (png) {
                        var stream = fs.createWriteStream('screenshots/' + browserName + '-' + result.fullName+ '.png');
                        stream.write(new Buffer(png, 'base64'));
                        stream.end();
                    });
                });
            }
        }
    });

    
-----Aqui acaba html reprots con screenshot

---COMO USAR GIT EN NUESTROS PROYECTOS----

comprobamos que lo tenemos, git --version

Creamos un repositorio en github

Comprobamos en opciones, gith path que está ubicado donde pone.
Comprobamos tambien que git enabled esta como enabled
Cuando añadamos veremos en oculto una carpeta dentro del proyecto llamada .git

Intentar no enviar todos los archivos a commit, muchos resultados de xml ocupan espacio, es mejor pasarlos a .gitignore,se creará
    una carpeta como .gitignore

El tio del video, añade estas lineas a gitignore para que nunca las guarde:
    allure-results/
    screenshots/
    target/

Para añadir los cambios a mi pagina de git : 
Buscamos en paleta de comando git add, damos a aceptar, nos pedira el irl del repositorio(el que hemos creado) y luego un nombre
Enter y listo
Por último añadimos los cambios a github
Vamos a comando otra vez y bscamos git push(tambien esta abajo a la izq,forma de nube)

git--)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


DEJO PARA MAÑANA ERROR DE Jasmine

Arreglado, volví a poner la conf de conf.js y ya funciona. No olvidar que para ver resultados tenemos que abrir el html generado

HE conseguido subir una carpeta a github ahora estoy intentado subir otro

He conseguido subirt varias carpetas siempre cambiando la rama a master( simplmenete pongo master arriba cuando me lo pide)
